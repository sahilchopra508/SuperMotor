{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  orders: [],\n  currentOrder: null,\n  loading: false,\n  error: null\n};\nconst orderSlice = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    fetchOrdersStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchOrdersSuccess: (state, action) => {\n      state.loading = false;\n      state.orders = action.payload;\n      state.error = null;\n    },\n    fetchOrdersFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    createOrderStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    createOrderSuccess: (state, action) => {\n      state.loading = false;\n      state.orders.unshift(action.payload);\n      state.currentOrder = action.payload;\n      state.error = null;\n    },\n    createOrderFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateOrderStatus: (state, action) => {\n      const {\n        orderId,\n        status,\n        currentStep\n      } = action.payload;\n      const order = state.orders.find(o => o.id === orderId);\n      if (order) {\n        order.status = status;\n        if (currentStep !== undefined) {\n          order.currentStep = currentStep;\n        }\n      }\n    },\n    setCurrentOrder: (state, action) => {\n      state.currentOrder = action.payload;\n    },\n    clearCurrentOrder: state => {\n      state.currentOrder = null;\n    },\n    updatePaymentStatus: (state, action) => {\n      const {\n        orderId,\n        paymentStatus\n      } = action.payload;\n      const order = state.orders.find(o => o.id === orderId);\n      if (order) {\n        order.paymentStatus = paymentStatus;\n      }\n    },\n    updateShippingInfo: (state, action) => {\n      const {\n        orderId,\n        shippingInfo\n      } = action.payload;\n      const order = state.orders.find(o => o.id === orderId);\n      if (order) {\n        order.shippingInfo = {\n          ...order.shippingInfo,\n          ...shippingInfo\n        };\n      }\n    },\n    addOrderNote: (state, action) => {\n      const {\n        orderId,\n        note\n      } = action.payload;\n      const order = state.orders.find(o => o.id === orderId);\n      if (order) {\n        if (!order.notes) {\n          order.notes = [];\n        }\n        order.notes.push({\n          id: Date.now(),\n          text: note,\n          timestamp: new Date().toISOString()\n        });\n      }\n    }\n  }\n});\nexport const {\n  fetchOrdersStart,\n  fetchOrdersSuccess,\n  fetchOrdersFailure,\n  createOrderStart,\n  createOrderSuccess,\n  createOrderFailure,\n  updateOrderStatus,\n  setCurrentOrder,\n  clearCurrentOrder,\n  updatePaymentStatus,\n  updateShippingInfo,\n  addOrderNote\n} = orderSlice.actions;\nexport default orderSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","orders","currentOrder","loading","error","orderSlice","name","reducers","fetchOrdersStart","state","fetchOrdersSuccess","action","payload","fetchOrdersFailure","createOrderStart","createOrderSuccess","unshift","createOrderFailure","updateOrderStatus","orderId","status","currentStep","order","find","o","id","undefined","setCurrentOrder","clearCurrentOrder","updatePaymentStatus","paymentStatus","updateShippingInfo","shippingInfo","addOrderNote","note","notes","push","Date","now","text","timestamp","toISOString","actions","reducer"],"sources":["C:/Users/Sahil Chopra/Downloads/SuperMotor/frontend/src/store/slices/orderSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  orders: [],\n  currentOrder: null,\n  loading: false,\n  error: null,\n};\n\nconst orderSlice = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    fetchOrdersStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchOrdersSuccess: (state, action) => {\n      state.loading = false;\n      state.orders = action.payload;\n      state.error = null;\n    },\n    fetchOrdersFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    createOrderStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    createOrderSuccess: (state, action) => {\n      state.loading = false;\n      state.orders.unshift(action.payload);\n      state.currentOrder = action.payload;\n      state.error = null;\n    },\n    createOrderFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateOrderStatus: (state, action) => {\n      const { orderId, status, currentStep } = action.payload;\n      const order = state.orders.find(o => o.id === orderId);\n      if (order) {\n        order.status = status;\n        if (currentStep !== undefined) {\n          order.currentStep = currentStep;\n        }\n      }\n    },\n    setCurrentOrder: (state, action) => {\n      state.currentOrder = action.payload;\n    },\n    clearCurrentOrder: (state) => {\n      state.currentOrder = null;\n    },\n    updatePaymentStatus: (state, action) => {\n      const { orderId, paymentStatus } = action.payload;\n      const order = state.orders.find(o => o.id === orderId);\n      if (order) {\n        order.paymentStatus = paymentStatus;\n      }\n    },\n    updateShippingInfo: (state, action) => {\n      const { orderId, shippingInfo } = action.payload;\n      const order = state.orders.find(o => o.id === orderId);\n      if (order) {\n        order.shippingInfo = { ...order.shippingInfo, ...shippingInfo };\n      }\n    },\n    addOrderNote: (state, action) => {\n      const { orderId, note } = action.payload;\n      const order = state.orders.find(o => o.id === orderId);\n      if (order) {\n        if (!order.notes) {\n          order.notes = [];\n        }\n        order.notes.push({\n          id: Date.now(),\n          text: note,\n          timestamp: new Date().toISOString(),\n        });\n      }\n    },\n  },\n});\n\nexport const {\n  fetchOrdersStart,\n  fetchOrdersSuccess,\n  fetchOrdersFailure,\n  createOrderStart,\n  createOrderSuccess,\n  createOrderFailure,\n  updateOrderStatus,\n  setCurrentOrder,\n  clearCurrentOrder,\n  updatePaymentStatus,\n  updateShippingInfo,\n  addOrderNote,\n} = orderSlice.actions;\n\nexport default orderSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}